[
    {
        "question": "Q1. What is the value of s?\n```\nNSMutableString *s = [NSMutableString stringWithString: @\"123\"];\n[s appendString: @\"456\"];\n```",
        "options": [
            "123456",
            "123",
            "456",
            "This code contains an error."
        ],
        "_ps": 0
    },
    {
        "question": "Q2. What's the value of i after these statements?\n```\nNSString *str = nil;\nNSInteger i = str.integerValue;\n```",
        "options": [
            "nil",
            "0 (technically `nil` == 0 but i will have a literal value of `0` and not the `void*` value of `nil`)",
            "-1",
            "This code crashes."
        ],
        "_ps": 1
    },
    {
        "question": "Q3. What value is in str after this line in executed?\n`NSString str = \"test\" + \" \" + \"more\";`",
        "options": [
            "This code contains an error",
            "test",
            "nil",
            "test more"
        ],
        "_ps": 0
    },
    {
        "question": "Q4. What does this code print?\n```\n    NSPredicate *p2 = [NSPredicate predicateWithBlock:^BOOL(NSString*  evaluatedObject, NSDictionary<NSString *,id> * _Nullable bindings) {\n      return evaluatedObject.intValue % 2 == 0;\n    }];\n    NSArray *vals = @[@\"1\", @\"2\", @\"3\"];\n    NSArray *n2 = [vals filteredArrayUsingPredicate:p2];\n    NSLog(@\"%@\", n2.firstObject);\n```",
        "options": [
            "2",
            "1,2,3",
            "1,2",
            "Nothing, since this code contains an error."
        ],
        "_ps": 0
    },
    {
        "question": "Q5. Property defaults include \\_?",
        "options": [
            "atomic/strong",
            "atomic/weak",
            "nonatomic/weak",
            "nonatomic/strong"
        ],
        "_ps": 0
    },
    {
        "question": "Q6. What is the key difference between NSDictionary and NSMutableDictionary?",
        "options": [
            "NSMutableDictionary's values can change",
            "NSMutableDictionary has not initializers.",
            "NSDictionary can't be copied.",
            "NSDictionary's values can change."
        ],
        "_ps": 0
    },
    {
        "question": "Q7. What is foo?\n`-(float)foo;`",
        "options": [
            "A function with a return type of float.",
            "This code contains an error.",
            "A variable declaration of type float.",
            "A property of type float."
        ],
        "_ps": 0
    },
    {
        "question": "Q8. What can you glean from this line?\n`#import \"NSString+NameHelper.h\"`",
        "options": [
            "NameHelper is a category of NSString.",
            "NameHelper is a subclass of NSString.",
            "NSString implements the NameHelper protocol.",
            "NSString has a helper class."
        ],
        "_ps": 0
    },
    {
        "question": "Q9. What's wrong with this code?\n`float x = 5.;`",
        "options": [
            "Nothing is wrong with this code.",
            "Declarations do not need semicolons.",
            "x=5 is an invalid float.",
            "Variables can't be declared and initialized in the same state."
        ],
        "_ps": 0
    },
    {
        "question": "Q10. How many times with this loop be executed?\n```\nfor (int x=0; x<100; x++) {\n  x = x + 1;\n}\n```",
        "options": [
            "50",
            "99",
            "100",
            "This code contains an error."
        ],
        "_ps": 0
    },
    {
        "question": "Q11. What is this code an example of?\n`[self addObserver: self forKeyPath: @\"val\" options:0 context: nil];`",
        "options": [
            "Key-Value Observing",
            "Class Value Observing",
            "Key-Data Observing",
            "KeyPath Observing"
        ],
        "_ps": 0
    },
    {
        "question": "Q12. What does ARC stand for?",
        "options": [
            "Automatic Reference Counting",
            "Automatic Retain Checking",
            "Async Retain Cycles",
            "Automatic Release Code"
        ],
        "_ps": 0
    },
    {
        "question": "Q13. What is printed for this code?\n```\nint val = 0;\nval = 1.5;\nprintf(\"%d\", val);\n```",
        "options": [
            "1",
            "2",
            "0",
            "This code contains an error."
        ],
        "_ps": 0
    },
    {
        "question": "Q14. What best describes class inheritance in Objective-C?",
        "options": [
            "single inheritance but multiple protocol implementation",
            "Objective-C doesn't support inheritance",
            "dual class inheritance",
            "unlimited class inheritance and protocol adherence"
        ],
        "_ps": 0
    },
    {
        "question": "Q15. How many keys does this NSDictionary have after this code is executed?\n`NSDictionary *dict = [[NSDictionary alloc] initWithObjectsAndKeys: @\"b\", @\"e\", @\"a\", @\"r\", nil];`",
        "options": [
            "2",
            "4",
            "5",
            "This code contains an error."
        ],
        "_ps": 0
    },
    {
        "question": "Q16. What is wrong with this code?\n```\nNSMutableDictionary *dict1 = [NSMutableDictionary dictionaryWithCapacity:5];\n[dict1 setValue:@\"key\" forKey:@\"value\"];\n```",
        "options": [
            "The key and value items are mixed",
            "Nothing is wrong with it",
            "You can't set the capacity of a dictionary",
            "NSMutableDictionary doesn't have a :setValue:forKey function."
        ],
        "_ps": 1
    },
    {
        "question": "Q17. What is printed from this code?\n```\nNSData *data = [@\"print\" dataUsingEncoding:NSASCIIStringEncoding];\nNSLog(@\"%@\", [[NSString alloc] initWithData:data encoding:NSASCIIStringEncoding]);\n```",
        "options": [
            "print",
            "This code is invalid",
            "Nothing is printed from this code.",
            "nil"
        ],
        "_ps": 0
    },
    {
        "question": "Q18. What is different about this function?\n`+(void)doSomething;`",
        "options": [
            "It is static",
            "It is abstract.",
            "It is inline.",
            "This code contains an error."
        ],
        "_ps": 0
    },
    {
        "question": "Q19. Structs can have \\_?",
        "options": [
            "functions",
            "initializers",
            "fields",
            "all of these answers"
        ],
        "_ps": 2
    },
    {
        "question": "Q20. What is wrong with this code?\n```\n@interface MyClass : NSObject\n    @property (strong, nonatomic, readonly) NSString *name;\n  @end\n```",
        "options": [
            "There is nothing wrong with this code.",
            "There is not read-only directive.",
            "MyClass doesn't implement NSObject.",
            "Properties are declared in the implementation."
        ],
        "_ps": 0
    },
    {
        "question": "Q21. What is an enums base type for the code below?\n`typedef enum { Foo1, Foo2} Foo;`",
        "options": [
            "There is no base type.",
            "NSObject",
            "int",
            "NSNumber"
        ],
        "_ps": 0
    },
    {
        "question": "Q22. If you want to store a small amount of information (e.g., user settings), whats the best, built-in way to go?",
        "options": [
            "UserDefaults",
            "plist file",
            "CoreData",
            "TextFile"
        ],
        "_ps": 0
    },
    {
        "question": "Q23. What are categories used for?",
        "options": [
            "to extend other classes",
            "to manage access control",
            "to coordinate objects",
            "to group classes"
        ],
        "_ps": 0
    },
    {
        "question": "Q24. What is this Objective-C code checking?\n```\nif ([keyPath isInstanceOf:[NSString class]]) {\n}\n```",
        "options": [
            "This code contains an error",
            "if keyPath is an instance of NSString",
            "if keyPath's baseclass is the same as NSString's baseclass",
            "if keyPath implements the same methods as NSString"
        ],
        "_ps": 0
    },
    {
        "question": "Q25. What is this a declaration of?\n`int(^foo)(int);`",
        "options": [
            "an Extension",
            "a Generic",
            "a block of code",
            "an abstract class"
        ],
        "_ps": 2
    },
    {
        "question": "Q26. For observing changes to a property, which of these two statements cause the related method to be called and why?\n```\n1. _val = 1;\n2. self.val= 100;\n```",
        "options": [
            "Statement 2, since it calls the auto-created setter on the property.",
            "Statement 1, since it uses the property directly.",
            "Statement 2, since it specifies the class instance to use.",
            "Statement 1, since it calls the auto-created setter on the property."
        ],
        "_ps": 0
    },
    {
        "question": "Q27. What is wrong with this code?\n```\nfloat x = 2.0;\nint(^foo)(int) = ^(int n1) {\n  return (int)(n1*x);\n};\nfoo(5);\n```",
        "options": [
            "Ints and floats can't be multiplied.",
            "The parameter isn't declared correctly.",
            "x is not in the right scope.",
            "Nothing is wrong with this code."
        ],
        "_ps": 3
    },
    {
        "question": "Q28. What's the difference between an array and a set?",
        "options": [
            "Arrays are ordered, non-unique values.",
            "Arrays are stored sorted.",
            "Sets are ordered, unique values.",
            "Sets can contain nils."
        ],
        "_ps": 0
    },
    {
        "question": "Q29. Dot notation can be used for \\_?",
        "options": [
            "nothing, as they're never used in Objective-C",
            "function calls only",
            "property getter/setter",
            "parameter delimiters"
        ],
        "_ps": 2
    },
    {
        "question": "Q30. What is the value of newVals after this code is executed?\n```\n    NSArray *vals = @[@\"1\", @\"2\", @\"3\"];\n    NSPredicate *pred = [NSPredicate predicateWithFormat:@\"SELF.intValue > 1\"];\n    NSArray *newVals = [vals filteredArrayUsingPredicate:pred];\n```",
        "options": [
            "2,3",
            "nil",
            "This code contains an error",
            "2,\"3\""
        ],
        "_ps": 0
    },
    {
        "question": "Q31. How would this function be called?\n`-(int)foo:(int)a b:(int)c;`",
        "options": [
            "self.foo(5, b:10);",
            "This code contains an error.",
            "[self foo:5:10:20];",
            "[self foo:5 b:10];"
        ],
        "_ps": 3
    },
    {
        "question": "Q32. What is the type of the error return value stored in json?\n```\n    NSError *error;\n    NSData *data;\n    id json = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingAllowFragments error:&error];\n```",
        "options": [
            "NSString",
            "NSArray",
            "id",
            "NSDictionary"
        ],
        "_ps": -1
    },
    {
        "question": "Q33. What is significant about this function declaration?\n```\n    -(void)testFunc:(NSString**)str;\n```",
        "options": [
            "The parameter is passed by value and can not be changed",
            "\\*\\* is not allowed on a parameter",
            "The parameter may be nil",
            "The parameter is passed by reference and may be changed"
        ],
        "_ps": 3
    },
    {
        "question": "Q34. What is printed from this code execution?\n```\n    typedef enum {\n        thing1,\n        thing2,\n        thing3\n    } Thing;\n    -(void) enumStuff {\n        NSLog(@\"%d\", thing2);\n    }\n```",
        "options": [
            "0",
            "1",
            "thing2",
            "This code does not print anything"
        ],
        "_ps": 1
    },
    {
        "question": "Q35. You are worried about threaded access to a property and possible collision in writing. What directive should you use on the property?",
        "options": [
            "non-atomic",
            "strong",
            "weak",
            "atomic"
        ],
        "_ps": 3
    },
    {
        "question": "Q36. What is wrong with this line of code?\n```\nint temp = 1==1;\n```",
        "options": [
            "`temp` is a keyword.",
            "1==1 is invalid.",
            "1==1 evaluates to a Boolean.",
            "Nothing is wrong with it."
        ],
        "_ps": 3
    },
    {
        "question": "Q37. What is special about the code within this block?\n```\ndispatch_async(dispatch_get_main_queue(), ^{\n// code\n});\n```",
        "options": [
            "It executes on the main queue.",
            "It is the last code to run before the app goes inactive.",
            "It executes on a background thread.",
            "It is queued to execute in the background."
        ],
        "_ps": 0
    },
    {
        "question": "Q38. How many items are in set1 after this code executes?\n```\nNSMutableSet *set1 = [NSMutableSet setWithObjects: @1,@2, @3, @4, @5, nil];\n[set1 add0bject:@3];\n```",
        "options": [
            "zero",
            "six",
            "one",
            "five"
        ],
        "_ps": 3
    },
    {
        "question": "Q39. What is wrong with this code?\n```\nNSDictionary *d1 = @[@\"v1\", @4, @\"v2\", @5.6, @\"v3\"];\nNSlog(@\"d1: %@\", d1);\n```",
        "options": [
            "NSDictionary cannot be printed this way.",
            "The last key is missing a value.",
            "Dictionaries cannot have mixed types as values.",
            "d1 is assigned an NSArray of values."
        ],
        "_ps": 1
    },
    {
        "question": "Q40. What is the initial value of the property `val`?\n```\n@property (nonatomic, readonly) int val;\n```",
        "options": [
            "8",
            "nil",
            "-1"
        ],
        "_ps": -1
    }
]
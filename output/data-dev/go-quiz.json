[
    {
        "question": "Q1. What do you need for two functions to be the same type?",
        "options": [
            "They should share the same signatures, including parameter types and return types.",
            "They should share the same parameter types but can return different types.",
            "All functions should be the same type.",
            "The functions should not be a first class type."
        ],
        "_ps": 0
    },
    {
        "question": "Q2. What does the `len()` function return if passed a UTF-8 encoded string?",
        "options": [
            "the number of characters",
            "the number of bytes",
            "It does not accept string types.",
            "the number of code points"
        ],
        "_ps": 1
    },
    {
        "question": "Q3. Which is _not_ a valid loop construct in Go?",
        "options": [
            "`do { ... } while i < 5`",
            "`for _,c := range \"hello\" { ... }`",
            "`for i := 1; i < 5; i++ { ... }`",
            "`for i < 5 { ... }`"
        ],
        "_ps": 0
    },
    {
        "question": "Q4. How will you add the number 3 to the right side?",
        "options": [
            "s := []int{1, 1, 2}`",
            "`values.append(3)`",
            "`values.insert(3, 3)`",
            "`append(values, 3)`"
        ],
        "_ps": -1
    },
    {
        "question": "Q5. What is the value of `Read`?",
        "options": [
            "",
            "(",
            "e = iota",
            ""
        ],
        "_ps": -1
    },
    {
        "question": "Q6. Which is the _only_ valid import statement in Go?",
        "options": [
            "`import \"github/gin-gonic/gin\"`",
            "`import \"https://github.com/gin-gonic/gin\"`",
            "`import \"../template\"`",
            "`import \"github.com/gin-gonic/gin\"`"
        ],
        "_ps": 3
    },
    {
        "question": "Q7. What would happen if you attempted to compile and run this Go program?",
        "options": [
            "",
            "e main",
            "obalFlag string",
            "ain() {"
        ],
        "_ps": -1
    },
    {
        "question": "Q8. From where is the variable `myVar` accessible if it is declared outside of any functions in a file in package `myPackage` located inside module `myModule`?",
        "options": [
            "It can be accessed anywhere inside `myPackage`, not the rest of myModule.",
            "It can be accessed by any application that imports `myModule`.",
            "It can be accessed from anywhere in `myModule`.",
            "It can be accessed by other packages in `myModule` as long as they import `myPackage`"
        ],
        "_ps": 0
    },
    {
        "question": "Q9. How do you tell `go test` to print out the tests it is running?",
        "options": [
            "`go test`",
            "`go test -x`",
            "`go test --verbose`",
            "`go test -v`"
        ],
        "_ps": 3
    },
    {
        "question": "Q10. This code printed `{0, 0}`. How can you fix it?",
        "options": [
            "",
            "oint struct {",
            "t",
            "t"
        ],
        "_ps": -1
    },
    {
        "question": "Q11. What does a `sync.Mutex` block while it is locked?",
        "options": [
            "all goroutines",
            "any other call to lock that `Mutex`",
            "any reads or writes of the variable it is locking",
            "any writes to the variable it is locking"
        ],
        "_ps": 1
    },
    {
        "question": "Q12. What is an idiomatic way to pause execution of the current scope until an arbitrary number of goroutines have returned?",
        "options": [
            "Pass an `int` and `Mutex` to each and count when they return.",
            "Loop over a `select` statement.",
            "Sleep for a safe amount of time.",
            "`sync.WaitGroup`"
        ],
        "_ps": 3
    },
    {
        "question": "Q13. What is a side effect of using `time.After` in a `select` statement?",
        "options": [
            "It blocks the other channels.",
            "It is meant to be used in select statements without side effects.",
            "It blocks the `select` statement until the time has passed.",
            "The goroutine does not end until the time passes."
        ],
        "_ps": 1
    },
    {
        "question": "Q14. What is the select statement used for?",
        "options": [
            "executing a function concurrently",
            "executing a different case based on the type of a variable",
            "executing a different case based on the value of a variable",
            "executing a different case based on which channel returns first"
        ],
        "_ps": 3
    },
    {
        "question": "Q15. According to the Go documentation standard, how should you document this function?",
        "options": [
            "",
            "dd(a, b int) {",
            "rn a + b",
            ""
        ],
        "_ps": -1
    },
    {
        "question": "Q16. What restriction is there on the type of `var` to compile this `i := myVal.(int)?`",
        "options": [
            "`myVal` must be an integer type, such as `int`, `int64`, `int32`, etc.",
            "`myVal` must be able to be asserted as an `int`.",
            "`myVal` must be an interface.",
            "`myVal` must be a numeric type, such as `float64` or `int64`."
        ],
        "_ps": 2
    },
    {
        "question": "Q17. What is a channel?",
        "options": [
            "a global variable",
            "a medium for sending values between goroutines",
            "a dynamic array of values",
            "a lightweight thread for concurrent programming"
        ],
        "_ps": 1
    },
    {
        "question": "Q18. How can you make a file build only on Windows?",
        "options": [
            "Check runtime.GOOS.",
            "Add a // +build windows comment anywhere in the file.",
            "Add a \\_ prefix to the file name.",
            "Add a // +build windows comment at the top of the file."
        ],
        "_ps": 3
    },
    {
        "question": "Q19. What is the correct way to pass this as a body of an HTTP POST request?",
        "options": [
            "",
            "= \"A group of Owls is called a parliament\"",
            "",
            "resp, err := http.Post(\"https://httpbin.org/post\", \"text/plain\", []byte(data))"
        ],
        "_ps": -1
    },
    {
        "question": "Q20. What should the idiomatic name be for an interface with a single method and the signature `Save() error`?",
        "options": [
            "Saveable",
            "SaveInterface",
            "ISave",
            "Saver"
        ],
        "_ps": 3
    },
    {
        "question": "Q21. A `switch` statement **\\_** its own lexical block. Each `case` statement **\\_** an additional lexical block.",
        "options": [
            "does not create; creates",
            "does not create; does not create",
            "creates; creates",
            "creates; does not create"
        ],
        "_ps": 2
    },
    {
        "question": "Q22. What is the default case sensitivity of the JSON `Unmarshal` function?",
        "options": [
            "The default behavior is case insensitive, but it can be overridden.",
            "Fields are matched case sensitive.",
            "Fields are matched case insensitive.",
            "The default behavior is case sensitive, but it can be overridden."
        ],
        "_ps": 0
    },
    {
        "question": "Q23. What is the difference between the `time` packageâ€™s `Time.Sub()` and `Time.Add()` methods?",
        "options": [
            "Time.Add() is for performing addition while Time.Sub() is for nesting timestamps.",
            "Time.Add() always returns a later time while time.Sub always returns an earlier time.",
            "They are opposites. Time.Add(x) is the equivalent of Time.Sub(-x).",
            "Time.Add() accepts a Duration parameter and returns a Time while Time.Sub() accepts a Time parameter and returns a Duration."
        ],
        "_ps": 3
    },
    {
        "question": "Q24. What is the risk of using multiple field tags in a single struct?",
        "options": [
            "Every field must have all tags to compile.",
            "It tightly couples different layers of your application.",
            "Any tags after the first are ignored.",
            "Missing tags panic at runtime."
        ],
        "_ps": 1
    },
    {
        "question": "Q25. Where is the built-in recover method useful?",
        "options": [
            "in the main function",
            "immediately after a line that might panic",
            "inside a deferred function",
            "at the beginning of a function that might panic"
        ],
        "_ps": 2
    },
    {
        "question": "Q26. Which choice does _not_ send output to standard error?",
        "options": [
            "println(message)",
            "log.New(os.Stderr, \"\", 0).Println(message)",
            "fmt.Errorf(\"%s\\n\", message)",
            "fmt.Fprintln(os.Stderr, message)"
        ],
        "_ps": 0
    },
    {
        "question": "Q27. How can you tell Go to import a package from a different location?",
        "options": [
            "Use a proxy.",
            "Change the import path.",
            "Use a replace directive in go.mod.",
            "Use a replace directory."
        ],
        "_ps": 2
    },
    {
        "question": "Q28. If your current working directory is the top level of your project, which command will run all its test packages?",
        "options": [
            "go test all",
            "go run --all",
            "go test .",
            "go test ./..."
        ],
        "_ps": 3
    },
    {
        "question": "Q29. Which encodings can you put in a string?",
        "options": [
            "any, it accepts arbitary bytes",
            "any Unicode format",
            "UTF-8 or ASCII",
            "UTF-8"
        ],
        "_ps": 3
    },
    {
        "question": "Q30. How is the behavior of `t.Fatal` different inside a `t.Run`?",
        "options": [
            "There is no difference.",
            "t.Fatal does not crash the test harness, preserving output messages.",
            "t.Fatal stops execution of the subtest and continues with other test cases.",
            "t.Fatal stops all tests and contains extra information about the failed subtest."
        ],
        "_ps": 2
    },
    {
        "question": "Q31. What does `log.Fatal` do?",
        "options": [
            "It raises a panic.",
            "It prints the log and then raises a panic.",
            "It prints the log and then safely exits the program.",
            "It exits the program."
        ],
        "_ps": 2
    },
    {
        "question": "Q32. Which is a valid Go time format literal?",
        "options": [
            "\"2006-01-02\"",
            "\"YYYY-mm-dd\"",
            "\"y-mo-d\"",
            "\"year-month-day\""
        ],
        "_ps": 0
    },
    {
        "question": "Q33. How should you log an error (err)",
        "options": [
            "`log.Error(err)`",
            "`log.Printf(\"error: %v\", err)`",
            "`log.Printf(log.ERROR, err)`",
            "`log.Print(\"error: %v\", err)`"
        ],
        "_ps": 1
    },
    {
        "question": "Q34. How does a `sync.Mutex` block while it is locked?",
        "options": [
            "any other call to lock that Mutex",
            "all goroutines",
            "any writes to the variable it is locking",
            "any reads or writes of the variable is it locking"
        ],
        "_ps": 0
    },
    {
        "question": "Q35. Which file names will the `go test` command recognize as test files?",
        "options": [
            "any that starts with `test`",
            "any files that include the word `test`",
            "only files in the root directory that end in `_test.go`",
            "any that ends in `_test.go`"
        ],
        "_ps": 3
    },
    {
        "question": "Q36. What will be the output of this code?",
        "options": [
            "",
            "make(chan int)",
            "7",
            " <-ch"
        ],
        "_ps": -1
    },
    {
        "question": "Q37. What will be the output of this program?",
        "options": [
            "",
            "make(chan int)",
            "ch)",
            " <-ch"
        ],
        "_ps": -1
    },
    {
        "question": "Q38. What will be printed in this code?",
        "options": [
            "",
            "ocks map[string]float64 // stock -> price",
            ":= stocks[\"MSFT\"]",
            "intln(\"%f\\n\", price)"
        ],
        "_ps": -1
    },
    {
        "question": "Q39. What is the common way to have several executables in your project?",
        "options": [
            "Have a cmd directory and a directory per executable inside it.",
            "Comment out main.",
            "Use build tags.",
            "Have a pkg directory and a directory per executable inside it."
        ],
        "_ps": 0
    },
    {
        "question": "Q40. How can you compile main.go to an executable that will run on OSX arm64 ?",
        "options": [
            "Set GOOS to **arm64** and GOARCH to **darwin**.",
            "Set GOOS to **osx** and GOARCH to **arm64**.",
            "Set GOOS to **arm64** and GOARCH to **osx**.",
            "Set GOOS to **darwin** and GOARCH to **arm64**."
        ],
        "_ps": 3
    },
    {
        "question": "Q41. What is the correct syntax ta start a goroutine that will `print Hello Gopher!`?",
        "options": [
            "`go(fmt.Println(\"Hello Gopher!\"))`",
            "`go func() { fmt.Println(\"Hello Gopher!\") }`",
            "`go fmt.Println(\"Hello Gopher!\")`",
            "`Go fmt.Println(\"Hello Gopher!\")`"
        ],
        "_ps": 2
    },
    {
        "question": "Q42. If you iterate over a map in a for range loop, in which order will the key:value pairs be accessed?",
        "options": [
            "in pseudo-random order that cannot be predicted",
            "in reverse order of how they were added, last in first out",
            "sorted by key in ascending order",
            "in the order they were added, first in first out"
        ],
        "_ps": 0
    },
    {
        "question": "Q43. What is an idiomatic way to customize the representation of a custom struct in a formatted string?",
        "options": [
            "There is no customizing the string representation of a type.",
            "Build it in pieces each time by calling individual fields.",
            "Implement a method `String()` string",
            "Create a wrapper function that accepts your type and outputs a string."
        ],
        "_ps": 2
    }
]
[
    {
        "question": "Q1. Which type cast preserves the mathematical value in all cases?",
        "options": [
            "i64 as i32",
            "usize as u64",
            "i32 as i64",
            "f64 as f32"
        ],
        "_ps": 2
    },
    {
        "question": "Q2. What do the vertical bars represent here?\n```rust\nstr::thread::spawn(|| {\n    println!(\"LinkedIn\");\n});\n```",
        "options": [
            "a closure",
            "a thread",
            "a future",
            "a block\n[reference](https://doc.rust-lang.org/book/ch13-01-closures.html#refactoring-with-closures-to-store-code)"
        ],
        "_ps": 0
    },
    {
        "question": "Q3. Which choice is not a scalar data type?",
        "options": [
            "integer",
            "float",
            "boolean",
            "tuple"
        ],
        "_ps": 3
    },
    {
        "question": "Q4. **\\_** cannot be destructured.",
        "options": [
            "Traits",
            "Tuples",
            "Enums",
            "Structs\n[reference](https://rust-lang.github.io/rfcs/2909-destructuring-assignment.html)"
        ],
        "_ps": 0
    },
    {
        "question": "Q5. Which `cargo` command checks a program for error without creating a binary executable?",
        "options": [
            "cargo --version",
            "cargo init",
            "cargo build",
            "cargo check"
        ],
        "_ps": 3
    },
    {
        "question": "Q6. The term _box_ and related phrases such as _boxing a value_ are often used when relating to memory layout. What does _box_ refer to?",
        "options": [
            "It's creating a pointer on the heap that points to a value on the stack.",
            "It's creating a pointer on the stack that points to a value on the heap.",
            "It's creating a memory guard around values to prevent illegal access.",
            "It's an abstraction that refers to ownership. \"Boxed\" values are clearly labelled."
        ],
        "_ps": 1
    },
    {
        "question": "Q7. What is an alternative way of writing `slice` that produces the same result?\n```rust\n...\nlet s = String::form(\"hello\");\nlet slice = &s[0..2];\n```",
        "options": [
            "let slice = &s[len + 2];",
            "let slice = &s[len - 2];",
            "let slice = &s.copy(0..2);",
            "let slice = &s[..2];"
        ],
        "_ps": 3
    },
    {
        "question": "Q8. Using the `?` operator at the end of an expression is equivalent to **\\_**.",
        "options": [
            "a match pattern that branches into True or False",
            "calling ok_error()",
            "calling panic!()",
            "a match pattern that may result an early return"
        ],
        "_ps": 3
    },
    {
        "question": "Q9. Which is valid syntax for defining an array of i32 values?",
        "options": [
            "Array<i32>::with_capacity(10)",
            "[i32]",
            "Array<i32>::new(10)",
            "[i32; 10]"
        ],
        "_ps": 3
    },
    {
        "question": "Q10. What syntax is required to take a mutable reference to T, when used within a function argument?\n```rust\nfn increment(i: T) {\n    // body elided\n}\n```",
        "options": [
            "\\*mut T",
            "mut ref T",
            "mut &T",
            "&mut T"
        ],
        "_ps": 3
    },
    {
        "question": "Q11. The smart pointers Rc and Arc provide reference counting. What is the API for incrementing a reference count?",
        "options": [
            ".add()",
            ".incr()",
            ".clone()",
            ".increment()\n[reference](https://doc.rust-lang.org/book/ch15-04-rc.html)"
        ],
        "_ps": 2
    },
    {
        "question": "Q12. What happens when an error occurs that is being handled by the question mark (?) operator?",
        "options": [
            "The error is reported and execution continues.",
            "An exception is raised. The effect(s) of the exception are defined by the error! macro.",
            "The program panics immediately.",
            "Rust attempts to convert the error to the local function's error type and return it as Result::Err. If that fails, the program panics."
        ],
        "_ps": 3
    },
    {
        "question": "Q13. Which comment syntax is not legal?",
        "options": [
            "`/*`",
            "`#`",
            "`//!`",
            "`//`"
        ],
        "_ps": 1
    },
    {
        "question": "Q14. In matching patterns, values are ignored with \\_.",
        "options": [
            "`.ignore()`",
            "`an underscore (_)`",
            "..",
            "skip"
        ],
        "_ps": 2
    },
    {
        "question": "Q15. Defining a \\_ requires a lifetime parameter.",
        "options": [
            "function that ends the lifetime of one of its arguments",
            "struct that contains a reference to a value",
            "function with a generic argument",
            "struct that contains a reference to a boxed value\n[Rust book reference](https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html#lifetime-annotations-in-struct-definitions)"
        ],
        "_ps": 1
    },
    {
        "question": "Q16. Which example correctly uses std::collections::HashMap's Entry API to populate counts?\n```rust\nuse std::collections::HashMap;\nfn main() {\n    let mut counts = HashMap::new();\n    let text = \"LinkedIn Learning\";\n    for c in text.chars() {\n        // Complete this block\n    }\n    println!(\"{:?}\", counts);\n}\n```",
        "options": [
            "```rust\nfor c in text.chars() {\n    if let Some(count) = &mut counts.get(&c) {\n        counts.insert(c, *count + 1);\n    } else {\n        counts.insert(c, 1);\n    };\n}\n```",
            "```rust\nfor c in text.chars() {\n    let count = counts.entry(c).or_insert(0);\n    *count += 1;\n}\n```",
            "```rust\nfor c in text.chars() {\n    let count = counts.entry(c);\n    *count += 1;\n}\n```",
            "```rust\nfor c in text.chars() {\n    counts.entry(c).or_insert(0).map(|x| x + 1);\n}\n```\n[reference](https://doc.rust-lang.org/std/collections/hash_map/struct.HashMap.html#method.entry)"
        ],
        "_ps": 1
    },
    {
        "question": "Q17. Which fragment does not incur memory allocations while writing to a \"file\" (represented by a Vec<u8>)?\n```rust\nuse std::collections::HashMap;\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let mut v = Vec::<u8>::new();\n    let a = \"LinkedIn\";\n    let b = 123;\n    let c = 'ðŸ§€';\n    // replace this line\n    println!(\"{:?}\", v);\n    Ok(())\n}\n```",
        "options": [
            "```rust\nwrite!(&mut v, \"{}{}{}\", a, b, c)?;\n```",
            "```rust\nv.write(a)?;\nv.write(b)?;\nv.write(c)?;\n```",
            "```rust\nv.write(a, b, c)?;\n```",
            "```rust\nv.write_all(a.as_bytes())?;\nv.write_all(&b.to_string().as_bytes())?;\nc.encode_utf8(&mut v);\n```\n1. [Answered in rust user forum](https://users.rust-lang.org/t/formatting-and-writing-to-a-file-without-malloc-or-locks/52295/9)\n2. [reference](https://doc.rust-lang.org/std/macro.write.html)"
        ],
        "_ps": 0
    },
    {
        "question": "Q18. Does the `main` function compile? If so, why? If not, what do you need to change?\n```rust\nfn main() {\n    let Some(x) = some_option_value;\n}\n```",
        "options": [
            "The code does not compile. `let` statements require a refutable pattern. Add `if` before `let`.",
            "The code compiles. `let` statements sometimes require a refutable pattern.",
            "The code does not compile. `let` statements requires an irrefutable pattern. Add `if` before `let`.",
            "The code compiles. `let` do not require a refutable pattern."
        ],
        "_ps": 2
    },
    {
        "question": "Q19. Which statement about lifetimes is false?",
        "options": [
            "Lifetimes were redundantly specified in previous version of Rust.",
            "Lifetimes are specified when a struct is holding a reference to a value.",
            "Lifetimes are specified when certain values must outlive others.",
            "Lifetimes are always inferred by the compiler."
        ],
        "_ps": 3
    },
    {
        "question": "Q20. When used as a return type, which Rust type plays a similar role to Python's `None`, JavaScript's `null`, or the `void` type in C/C++?",
        "options": [
            "`!`",
            "`None`",
            "`Null`",
            "`()`"
        ],
        "_ps": 3
    },
    {
        "question": "Q21. To convert a `Result` to an `Option`, which method should you use?",
        "options": [
            "`.as_option()`",
            "`.ok()`",
            "`.to_option()`",
            "`.into()`"
        ],
        "_ps": 1
    },
    {
        "question": "Q22. Which statement about the `Clone` and `Copy` traits is false?",
        "options": [
            "`Copy` is enabled for primitive, built-in types.",
            "Without `Copy`, Rust applies move semantics to a type's access.",
            "When using `Clone`, copying data is explicit.",
            "Until a type implements either `Copy` or `Clone`, its internal data cannot be copied.\n[ref from stack overflow](https://stackoverflow.com/questions/41413336/do-all-primitive-types-implement-the-copy-trait)"
        ],
        "_ps": 0
    },
    {
        "question": "Q23. Why does this code _not_ compile?\n```rust\nfn returns_closure() -> dyn Fn(i32) -> i32 {\n    |x| x + 1\n}\n```",
        "options": [
            "The returned `fn` pointer and value need to be represented by another trait.",
            "Closures are types, so they cannot be returned directly from a function.",
            "Closures are types and can be returned only if the concrete trait is implemented.",
            "Closures are represented by traits, so they cannot be a return type.\n[Rust book reference](https://doc.rust-lang.org/book/ch19-05-advanced-functions-and-closures.html#returning-closures)"
        ],
        "_ps": 3
    },
    {
        "question": "Q24. What smart pointer is used to allow multiple ownership of a value in various threads?",
        "options": [
            "`Arc<T>`",
            "`Box<T>`",
            "Both `Arc<T>` and `Rc<T>` are multithread safe.",
            "`Rc<T>`\n[Rust book reference](https://doc.rust-lang.org/book/ch16-03-shared-state.html?highlight=arc%3CT%3E#atomic-reference-counting-with-arct)"
        ],
        "_ps": 0
    },
    {
        "question": "Q25. Which types are _not_ allowed within an enum variant's body?",
        "options": [
            "zero-sized types",
            "structs",
            "trait objects",
            "floating-point numbers\n[Reference](https://doc.rust-lang.org/reference/types/trait-object.html)"
        ],
        "_ps": 2
    },
    {
        "question": "Q26. Which statement about this code is true?\n```rust\nfn main() {\n    let c = 'z';\n    let heart_eyed_cat = 'ðŸ˜»';\n}\n```",
        "options": [
            "Both are character literals.",
            "`heart_eyed_cat` is an invalid expression.",
            "`c` is a string literal and `heart_eyed_cat` is a character literal.",
            "Both are string literals.\n[Reference](https://doc.rust-lang.org/std/primitive.char.html)"
        ],
        "_ps": 0
    },
    {
        "question": "Q27. Your application requires a single copy of some data type T to be held in memory that can be accessed by multiple threads. What is the thread-safe wrapper type?",
        "options": [
            "`Mutex<Arc<T>>`",
            "`Rc<Mutex<T>>`",
            "`Arc<Mutex<T>>`",
            "`Mutex<Rc<T>>`\n[Rust book reference](https://doc.rust-lang.org/book/ch16-03-shared-state.html#atomic-reference-counting-with-arct)"
        ],
        "_ps": 2
    },
    {
        "question": "Q28. Which idiom can be used to concatenate the strings `a`, `b`, `c`?\n```rust\nlet a = \"a\".to_string();\nlet b = \"b\".to_string();\nlet c = \"c\".to_string();\n```",
        "options": [
            "`String::from(a,b,c)`",
            "`format!(\"{}{}{}\", a, b, c)`",
            "`concat(a,b,c)`",
            "`a + b + c`"
        ],
        "_ps": 1
    },
    {
        "question": "Q29. In this function. what level of access is provided to the variable `a`?\n```rust\nuse std::fmt::Debug;\nfn report<T:Debug>(a: &T) {\n    eprintln!(\"info: {:?}\", a);\n}\n```",
        "options": [
            "print",
            "read-only",
            "read/write",
            "debug"
        ],
        "_ps": 1
    },
    {
        "question": "Q30. Which choice is _not_ valid loop syntax?",
        "options": [
            "`loop`",
            "`for`",
            "`while`",
            "`do`"
        ],
        "_ps": 3
    },
    {
        "question": "Q31. How do you construct a value of `Status` that is initialized to `Waiting`?\n```rust\nenum Status {\n    Waiting,\n    Busy,\n    Error(String),\n}\n```",
        "options": [
            "`let s = Enum::new(Status::Waiting);`",
            "`let s = new Status::Waiting;`",
            "`let s = Status::Waiting;`",
            "`let s = Status::new(Waiting);`"
        ],
        "_ps": 2
    },
    {
        "question": "Q32. Which statement about enums is false?",
        "options": [
            "Enums are useful in matching patterns.",
            "Option is an enum type.",
            "Enum variants can have different types with associated data.",
            "the term _enum_ is short for _enummap_"
        ],
        "_ps": 3
    },
    {
        "question": "Q33. What does an underscore (\\_) indicate when used as pattern?",
        "options": [
            "It matches everything.",
            "It matches underscores.",
            "It matches any value that has a length of 1.",
            "It matches nothing."
        ],
        "_ps": 0
    },
    {
        "question": "Q34. What is a safe operation on a `std::cell:UnsafeCell<T>`?",
        "options": [
            "A `&mut T` reference is allowed. However it may not cpexists with any other references. and may be created only in single-threaded code.",
            "`UnsafeCell<T>` provides thread-safety. Therefore, creating `&T` references from multiple threads is safe.",
            "The only safe operation is the `.get()` method, which returns only a raw pointer.",
            "Non. `UnsafeCell<T>` only allows code that would otherwise need unsafe blocks to be written in safe code.\n[Reference](https://doc.rust-lang.org/stable/std/cell/struct.UnsafeCell.html)"
        ],
        "_ps": 2
    },
    {
        "question": "Q35. Generics are useful when you **\\_**.",
        "options": [
            "need to reduce code duplication by concretizing values and restricting parameters in functions",
            "need to reduce code duplication by abstracting values further, such as in function parameters",
            "need a supertrait",
            "are not sure if you need a specific kind of trait"
        ],
        "_ps": 1
    },
    {
        "question": "Q36. **\\_** cannot be destructed.",
        "options": [
            "Traits",
            "Enums",
            "Tuples",
            "Structs"
        ],
        "_ps": 0
    },
    {
        "question": "Q37. How do you create a Rust project on the command-line?",
        "options": [
            "cargo new",
            "rustup init",
            "cargo start"
        ],
        "_ps": 0
    }
]